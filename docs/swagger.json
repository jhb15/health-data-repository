{
  "openapi": "3.0.0",
  "info": {
    "description": "Health Data Repository API",
    "version": "1.1.0",
    "title": "Health Data Repository"
  },
  "tags": [
    {
      "name": "activity",
      "description": "Performs CRUD operations on activity records"
    },
    {
      "name": "activity-types",
      "description": "Provides a list of activities configured by an admin, with mappings relevant to ingest services"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "activity_record": {
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Activity ID"
          },
          "UserID": {
            "type": "string",
            "description": "User's Gatekeeper Identifier"
          },
          "StartTimestamp": {
            "type": "string",
            "description": "ISO8601 without local timestamp"
          },
          "EndTimestamp": {
            "type": "string",
            "description": "ISO8601 without local timestamp"
          },
          "Source": {
            "type": "integer",
            "description": "ID for the Data Source"
          },
          "ActivityType": {
            "type": "integer",
            "description": "ID for the Activity Type"
          },
          "CaloriesBurnt": {
            "type": "integer",
            "description": "KCals burnt during this activity"
          },
          "AverageHeartRate": {
            "type": "integer",
            "description": "User's average heart rate throughout this activity"
          },
          "StepsTaken": {
            "type": "integer",
            "description": "Number of steps taken by the user during this activity, if applicable"
          },
          "MetresTravelled": {
            "type": "float",
            "description": "Number of metres travelled by the user during this activity, if applicable"
          },
          "MetresElevationGained": {
            "type": "float",
            "description": "Elevation gained by the user in metres during the activity, if applicable"
          }
        }
      },
      "new_activity_record": {
        "properties": {
          "UserID": {
            "type": "string",
            "description": "User's Gatekeeper Identifier"
          },
          "StartTimestamp": {
            "type": "string",
            "description": "ISO8601 without local timestamp"
          },
          "EndTimestamp": {
            "type": "string",
            "description": "ISO8601 without local timestamp"
          },
          "Source": {
            "type": "integer",
            "description": "ID for the Data Source"
          },
          "ActivityType": {
            "type": "integer",
            "description": "ID for the Activity Type"
          },
          "CaloriesBurnt": {
            "type": "integer",
            "description": "KCals burnt during this activity"
          },
          "AverageHeartRate": {
            "type": "integer",
            "description": "User's average heart rate throughout this activity"
          },
          "StepsTaken": {
            "type": "integer",
            "description": "Number of steps taken by the user during this activity, if applicable"
          },
          "MetresTravelled": {
            "type": "float",
            "description": "Number of metres travelled by the user during this activity, if applicable"
          },
          "MetresElevationGained": {
            "type": "float",
            "description": "Elevation gained by the user in metres during the activity, if applicable"
          }
        },
        "required": [
          "UserID",
          "StartTimestamp",
          "EndTimestamp",
          "Source",
          "ActivityType"
        ]
      },
      "activity_list": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "ISO8601 without local timestamp"
            },
            "quantity_unit": {
              "type": "string",
              "description": "The unit for the activity, if it is used"
            },
            "uses_duration": {
              "type": "boolean",
              "description": "Whether the activity tracks duration"
            },
            "uses_distance": {
              "type": "boolean",
              "description": "Whether the activity tracks distance"
            },
            "fitbit_activity_ids": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "A FitBit activity ID that should map onto this activity"
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": [

      ]
    }
  ],
  "paths": {
    "/api/activity/{activityId}": {
      "get": {
        "tags": [
          "activity"
        ],
        "summary": "Gets the activity record matching the given activity ID",
        "parameters": [
          {
            "in": "path",
            "name": "activityId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The UUID representing an activity record"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "content/json": {
                "schema": {
                  "$ref": "#/components/schemas/activity_record"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "activity record not found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "activity"
        ],
        "summary": "Updates an existing activity record",
        "parameters": [
          {
            "in": "path",
            "name": "activityId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The UUID representing an activity record"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/new_activity_record"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Updated"
          },
          "401": {
            "description": "Unauthorised"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "activity"
        ],
        "summary": "Deletes the requested activity record",
        "parameters": [
          {
            "in": "path",
            "name": "activityId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The UUID representing a activity record"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/activity/find/{userId}": {
      "get": {
        "tags": [
          "activity"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user ID associated with the activities to find"
          },
          {
            "in": "query",
            "name": "fromTime",
            "schema": {
              "type": "string"
            },
            "description": "(Optional) The timestamp (ISO8061) to search from"
          },
          {
            "in": "query",
            "name": "toTime",
            "schema": {
              "type": "string"
            },
            "description": "(Optional) The timestamp (ISO8061) to search up to"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/activity_record"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "No items based on the requested criteria were found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/activity": {
      "post": {
        "tags": [
          "activity"
        ],
        "summary": "Creates a new activity record",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/new_activity_record"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorised"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
"/api/activity-types": {
			"get": {
        "tags": [
          "activity-types"
        ],
        "summary": "Gets the list of activity types added by administrators",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "content/json": {
                "schema": {
                  "$ref": "#/components/schemas/activity_list"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "activity record not found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    }
  }
}